#!/usr/bin/env python

import argparse
import logging
import re
import subprocess
import time

logging.basicConfig(level="INFO", format='%(asctime)-15s %(levelname)s: %(message)s')

p = argparse.ArgumentParser(
    description="Run this script on a machine in the background to shutdown the machine when load stays below some threshold for some number of mintues", 
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
p.add_argument("-L", "--load-threshold", type=float, default=0.2, help="utpime load below this threshold will be considered idle")
p.add_argument("--minutes", type=float, default=60, help="shutdown after idle for this many minutes")
p.add_argument("--shutdown-command", default="poweroff", help="run this command to shutdown the machine")
args = p.parse_args()

idle_minutes_counter = 0
logging.info("This machine will shutdown if load stays <= %s for %s minutes...", args.load_threshold, args.minutes)

SLEEP_SECONDS = 6
while idle_minutes_counter < args.minutes:
    time.sleep(SLEEP_SECONDS)
    uptime_output = subprocess.check_output(["uptime"]).decode("UTF-8")
    logging.debug(uptime_output)

    match = re.search("load average: ([0-9]+.[0-9]+)", uptime_output)
    if not match:
        logging.error("Unable to parse uptime output: %s", uptime_output)
    current_load = float(match.group(1))

    if current_load <= args.load_threshold:
        idle_minutes_counter += SLEEP_SECONDS/60.0
        logging.info("Current load = %s. This machine will shutdown if load stays <= %s for %0.1f more minutes.", 
                current_load, args.load_threshold, args.minutes - idle_minutes_counter)
    else:
        logging.info("Current load = %s. Idle time reset to 0.", current_load)
        idle_minutes_counter = 0

logging.info("Running command: '%s'...", args.shutdown_command)
subprocess.check_output(args.shutdown_command, shell=True)
