#!/usr/bin/env python3

import argparse
import logging
import os
import platform
import re
import subprocess
import sys
import time

logging.basicConfig(level="INFO", format='%(asctime)-15s %(levelname)s: %(message)s')

p = argparse.ArgumentParser(description="Prints subdirectory sizes.")
p.add_argument("-G", "--gig", action="store_true", help="Only output paths that use more than 1Gb")
p.add_argument("-t", "--total")
p.add_argument("-v", "--verbose", action="store_true")
p.add_argument("path", help="gs:// or local path", nargs="*")
args = p.parse_args()

if not args.path:
	args.path = ["."]

output_lines = []
for path in args.path:
	if path.startswith("gs://"):
		command = f"gsutil ls {path}"
	else:
		command = f"ls {path}"

	try:
		subpaths = subprocess.check_output(command, shell=True, encoding="UTF-8").split()
	except Exception as e:
		print(f"ERROR: unable to list path: {path}. Skipping...")
		continue

	for subpath in subpaths:
		subpath = re.sub("/$", "", subpath)
		if path.startswith("gs://"):
			full_path = subpath
			command = f"gsutil du -h -s {full_path}"
		else:
			full_path = os.path.join(path, subpath)
			if platform.system() == "Darwin":
				command = f"du -h -d 0 {full_path}"
			else:
				command = f"du -h -d 0 {full_path}"

		if args.gig:
			command  += " 2>&1 | grep '[0-9][ ]*[GT]' || true"

		if args.verbose:
			logging.info(command)

		try:
			output = subprocess.check_output(command, shell=True, encoding="UTF-8").strip("\n")
			if output:
				logging.info(output)
				output_lines.append(output)
		except Exception as e:
			logging.error("ERROR: %s", e)


def size_sorter(line):
	fields = re.split("\s+", line.strip())
	size_string = fields[0]
	multiplier = 0.1
	if size_string.endswith("T"):
		multiplier = 4
	elif size_string.endswith("G"):
		multiplier = 3
	elif size_string.endswith("M"):
		multiplier = 2
	elif size_string.endswith("K"):
		multiplier = 1
	size_string = size_string.strip("TGMK")
	try:
		size_string = float(size_string)
	except Exception as e:
		print(f"WARNING: couldn't parse file size in", "%-300s" % line.strip(), str(e))

	return multiplier, size_string


if output_lines:
	print("\nSorted by size:")
	for line in sorted(output_lines, key=size_sorter, reverse=True):
		print(line.strip("\n"))
